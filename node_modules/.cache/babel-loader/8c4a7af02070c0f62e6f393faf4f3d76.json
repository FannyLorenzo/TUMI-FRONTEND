{"remainingRequest":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fanny/Documentos/CURSOS/GES/tumi_project/src/views/tableros/componentes/std_ventas/graf_ventas.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/src/views/tableros/componentes/std_ventas/graf_ventas.vue","mtime":1627753466783},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["graf_ventas.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-card class=\"mb-7\">\n    <v-toolbar flat>\n      <v-toolbar-title>Total ventas por variedad de Arroz</v-toolbar-title>\n    </v-toolbar>\n    <v-divider></v-divider>\n    <div class=\"mt-4 pa-4\">\n      <div>\n        <apexchart\n          type=\"area\"\n          height=\"350\"\n          :options=\"chartOptions\"\n          :series=\"series\"\n        ></apexchart>\n      </div>\n    </div>\n  </v-card>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport moment from \"moment\";\n//import { mapState, mapActions } from \"vuex\";\n//import VueApexCharts from \"vue-apexcharts\" ;\n\nexport default {\n  name: \"graf_ventas\",\n\n  data: () => ({\n    // datos\n    data: [],\n    fecha_inicio: \"\",\n    fecha_fin: \"\",\n\n    dataSet: [], // numeros finales - esto se grafica\n    dataSeries: [], // varias variedades [ [],[],[] ] - solo es totales por variedad\n\n    series: [\n      {\n        name: \"VARIEDAD A\",\n        data: [],\n      },\n      {\n        name: \"VARIEDAD B\",\n        data: [],\n      }\n      \n    ],\n\n    chartOptions: {\n      chart: {\n        type: \"area\",\n        stacked: true,\n        height: 350,\n        zoom: {\n          enabled: true,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      markers: {\n        size: 0,\n      },\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          shadeIntensity: 1,\n          inverseColors: false,\n          opacityFrom: 0.45,\n          opacityTo: 0.05,\n          stops: [20, 100, 100, 100],\n        },\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: \"#8e8da4\",\n          },\n          offsetX: 0,\n          formatter: function (val) {\n            return val.toLocaleString(undefined, {maximumFractionDigits:2});\n          },\n        },\n        axisBorder: {\n          show: false,\n        },\n        axisTicks: {\n          show: false,\n        },\n      },\n      xaxis: {\n        type: \"datetime\",\n        tickAmount: 8,\n        min: new Date().getTime(), // cambbia con la actualización de fechas\n        max: new Date().getTime(),\n        labels: {\n          rotate: -15,\n          rotateAlways: true,\n          formatter: function (val, timestamp) {\n            return moment(new Date(timestamp)).format(\"DD MMM YYYY\");\n          },\n        },\n      },\n      title: {\n        text: \"Evolución de ventas - anual\",\n        align: \"left\",\n        offsetX: 14,\n      },\n      tooltip: {\n        shared: true,\n      },\n      theme: {mode: 'dark', palette: 'palette1'},\n      legend: {\n        position: \"top\",\n        horizontalAlign: \"right\",\n        offsetX: -10,\n      },\n    },\n\n  }),\n  created() {\n    // this.refrescarIndiProduccion();\n   this.fechas_actuales();\n    this.recuperarDataset();\n  },\n  computed: {\n    // ...mapState([\"barChart\",\"series\", \"chartOptions\"]),\n  },\n\n  methods: {\n    //  ...mapActions([\"refrescarIndiProduccion\"]),\n\n    fechas_actuales() {\n      // FECHA VALIDA QUE TRANSFORMA \"2018-01-30\" A time ok, new Date(new Date(\"2018-01-30\".replace('-','/')).getTime())\n      let state = this;\n      const g = new Date();\n      let anio = g.getFullYear();\n      let mes = g.getMonth() + 1;\n      let dia = g.getDate();\n\n      this.fecha_inicio = anio - 1 + \"/\" + mes + \"/\" + dia;\n     // this.fecha_inicio = \"2021/07/17\";\n      this.fecha_fin = anio + \"/\" + mes + \"/\" + (dia+1);\n     // let fechita = new Date(this.fecha_inicio).getTime(); //this.fecha_inicio.getTime();\n\n\n      console.log(\n        \"fecha ini: \" + this.fecha_inicio + \" fecha fin: \" + this.fecha_fin\n      );\n      \n      state.chartOptions = {...state.chartOptions, ...{ \n        xaxis: {\n        type: \"datetime\",\n        tickAmount: 8,\n        min: new Date(this.fecha_inicio).getTime(),\n        max: new Date(this.fecha_fin).getTime(),\n        labels: {\n          rotate: -15,\n          rotateAlways: true,\n          formatter: function (val, timestamp) {\n            return moment(new Date(timestamp)).format(\"DD MMM YYYY\");\n          },\n        },\n      },} };\n       \n    },\n    mostrarData(data){\n      var msg = \"\";\n      console.log(\"entro a: \");\n      for(let i=0 ; i<data.size; i++){\n        msg +=\"[\";\n        for(let j=0 ; j<data[i].size; j++){\n          \n            msg +=\" \"+data[i][j];\n        \n      \n        }\n       msg +=\"], \";\n\n     } \n     console.log(\"ojo: \"+msg);\n     },\n    recuperarDataset() {\n       let state = this;  \n      let newData = [];\n      let newNames = []; \n      state.data = [];\n\n   \n      axios\n        .get(\"vent/anual/\") //vent/anual/\n        .then(function (response) {\n          state.data = response.data;    \n          console.log(\"data \" + state.data);\n\n          // VARIEDADES\n          let pas = 0;\n          Object.values(state.data).map((item) => { //mapeo cada DIA\n            Object.values(item).map((ele) => { //variedades de cada DIA\n              if (newNames.includes(ele.VARIEDAD)) {\n                console.log(\"repetido\");\n              } else {\n                newNames[pas] = ele.VARIEDAD;\n                pas++;\n              }\n            });\n          });\n\n          console.log(\"variedades \" + newNames);\n\n          // DATASERIES\n         newData = newNames.map((vari) => {\n           const container = {};\n           container['name'] = vari;\n           let cadena=[];          \n           let incidencia = 0;\n           const g = new Date();\n            let anio = g.getFullYear();\n            let mes = g.getMonth() + 1;\n            let dia = g.getDate();\n            let fechis = anio - 1 + \"/\" + mes + \"/\" + dia;\n\n          let fechita = new Date(fechis).getTime(); //this.fecha_inicio.getTime();\n            console.log(\"variedad  fechita: \"+vari+\" - \"+fechita);\n           Object.values(state.data).map((item) => {\n              Object.values(item).map((ele) => {\n                     \n                    if(ele.VARIEDAD===vari){\n                      fechita = new Date(ele.FECHA).getTime()+86400000;              \n                      cadena.push([fechita, ele.TOTAL]);\n                      console.log(\"[\"+fechita+\", \"+ele.TOTAL+\"]\" + incidencia); \n                      incidencia++;\n                    }  \n                    /*           \n\n                    if(incidencia<=0){ // si no se encuentra en la lista, el envase requerido, 0\n                      cadena.push([fechita, 0]); \n                      console.log(\"[\"+fechita+\", \"+0+\"]\"); \n                    }*/\n                  fechita = fechita + 86400000; //se aumenta un dia\n              }); //fin items data\n            }); //fin data\n              \n            if(cadena!=null)\n            container['data'] = cadena; //THIS\n\n          return container;\n          }); //fin variedades\n\n          console.log(\"newdata: \"+newData);\n          // ACTUALZACIÓN DE VALORES A GRÁFICA\n       // state.chartOptions = {...state.chartOptions, ...{ xaxis: {categories: newCategories,}} };\n        state.series =  Object.values(newData).map(item => item);\n                  \n         \n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },\n  },\n};\n</script>\n\n\n"],"sourceRoot":"src/views/tableros/componentes/std_ventas"}]}