{"remainingRequest":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fanny/Documentos/CURSOS/GES/tumi_project/src/views/form-layouts/form-validation/form-data/FormSubmitValidation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/src/views/form-layouts/form-validation/form-data/FormSubmitValidation.vue","mtime":1627753466775},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiRm9ybVN1Ym1pdFZhbGlkYXRpb24iLAoKICBkYXRhOiAoKSA9PiAoewogICAgdmFsaWQ6IHRydWUsCiAgICBuYW1lOiAiIiwKICAgIG5hbWVSdWxlczogWwogICAgICB2ID0+ICEhdiB8fCAiTmFtZSBpcyByZXF1aXJlZCIsCiAgICAgIHYgPT4gKHYgJiYgdi5sZW5ndGggPD0gMTApIHx8ICJOYW1lIG11c3QgYmUgbGVzcyB0aGFuIDEwIGNoYXJhY3RlcnMiCiAgICBdLAogICAgZW1haWw6ICIiLAogICAgZW1haWxSdWxlczogWwogICAgICB2ID0+ICEhdiB8fCAiRS1tYWlsIGlzIHJlcXVpcmVkIiwKICAgICAgdiA9PiAvLitALitcLi4rLy50ZXN0KHYpIHx8ICJFLW1haWwgbXVzdCBiZSB2YWxpZCIKICAgIF0sCiAgICBzZWxlY3Q6IG51bGwsCiAgICBpdGVtczogWyJJdGVtIDEiLCAiSXRlbSAyIiwgIkl0ZW0gMyIsICJJdGVtIDQiXSwKICAgIGNoZWNrYm94OiBmYWxzZQogIH0pLAogIG1ldGhvZHM6IHsKICAgIHZhbGlkYXRlKCkgewogICAgICB0aGlzLiRyZWZzLmZvcm0udmFsaWRhdGUoKTsKICAgIH0sCiAgICByZXNldCgpIHsKICAgICAgdGhpcy4kcmVmcy5mb3JtLnJlc2V0KCk7CiAgICB9LAogICAgcmVzZXRWYWxpZGF0aW9uKCkgewogICAgICB0aGlzLiRyZWZzLmZvcm0ucmVzZXRWYWxpZGF0aW9uKCk7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["FormSubmitValidation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FormSubmitValidation.vue","sourceRoot":"src/views/form-layouts/form-validation/form-data","sourcesContent":["<template>\n  <!-- ----------------------------------------------------------------------------- -->\n  <!-- Form Submit Validation -->\n  <!-- ----------------------------------------------------------------------------- -->\n  <div>\n    <v-list-item-subtitle class=\"text-wrap\">\n      The\n      <code>v-form</code> component has\n      <span class=\"grey--text text--darken-4 font-weight-bold\">three</span> functions that can be accessed by setting a ref on the component. A ref allows us to access internal methods on a component, for example,\n      <code>v-form ref=\"form\"</code>.\n      <span class=\"grey--text text--darken-4 font-weight-bold\">this.$refs.form.validate()</span> will validate all inputs and return if they are all valid or not.\n      <span\n        class=\"grey--text text--darken-4 font-weight-bold\"\n      >this.$refs.form.reset()</span> will clear all inputs and reset their validation errors.\n      <span\n        class=\"grey--text text--darken-4 font-weight-bold\"\n      >this.$refs.form.resetValidation()</span> will only reset input validation and not alter their state.\n    </v-list-item-subtitle>\n    <div class=\"mt-4\">\n      <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n        <v-text-field\n          v-model=\"name\"\n          :counter=\"10\"\n          :rules=\"nameRules\"\n          label=\"Name\"\n          filled\n          background-color=\"transparent\"\n          required\n        ></v-text-field>\n\n        <v-text-field\n          v-model=\"email\"\n          :rules=\"emailRules\"\n          label=\"E-mail\"\n          required\n          filled\n          background-color=\"transparent\"\n        ></v-text-field>\n\n        <v-select\n          v-model=\"select\"\n          :items=\"items\"\n          :rules=\"[v => !!v || 'Item is required']\"\n          label=\"Item\"\n          required\n          filled\n          background-color=\"transparent\"\n        ></v-select>\n\n        <v-checkbox\n          v-model=\"checkbox\"\n          :rules=\"[v => !!v || 'You must agree to continue!']\"\n          label=\"Do you agree?\"\n          required\n        ></v-checkbox>\n\n        <v-btn :disabled=\"!valid\" color=\"success\" class=\"mr-4\" @click=\"validate\">Validate</v-btn>\n\n        <v-btn color=\"error\" class=\"mr-4\" @click=\"reset\">Reset Form</v-btn>\n\n        <v-btn color=\"warning\" @click=\"resetValidation\">Reset Validation</v-btn>\n      </v-form>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"FormSubmitValidation\",\n\n  data: () => ({\n    valid: true,\n    name: \"\",\n    nameRules: [\n      v => !!v || \"Name is required\",\n      v => (v && v.length <= 10) || \"Name must be less than 10 characters\"\n    ],\n    email: \"\",\n    emailRules: [\n      v => !!v || \"E-mail is required\",\n      v => /.+@.+\\..+/.test(v) || \"E-mail must be valid\"\n    ],\n    select: null,\n    items: [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"],\n    checkbox: false\n  }),\n  methods: {\n    validate() {\n      this.$refs.form.validate();\n    },\n    reset() {\n      this.$refs.form.reset();\n    },\n    resetValidation() {\n      this.$refs.form.resetValidation();\n    }\n  }\n};\n</script>"]}]}