{"remainingRequest":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fanny/Documentos/CURSOS/GES/tumi_project/src/components/vuetifyComponents/sparkline/SparklineTakeBreak.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/src/components/vuetifyComponents/sparkline/SparklineTakeBreak.vue","mtime":1627753466727},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCgpjb25zdCBleGhhbGUgPSBtcyA9PgogICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSkKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiU3BhcmtsaW5lVGFrZUJyZWFrIiwKCiAgZGF0YTogKCkgPT4gKHsKICAgICAgY2hlY2tpbmc6IGZhbHNlLAogICAgICBoZWFydGJlYXRzOiBbXSwKICB9KSwKICBjb21wdXRlZDogewogICAgICBhdmcgKCkgewogICAgICAgIGNvbnN0IHN1bSA9IHRoaXMuaGVhcnRiZWF0cy5yZWR1Y2UoKGFjYywgY3VyKSA9PiBhY2MgKyBjdXIsIDApCiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5oZWFydGJlYXRzLmxlbmd0aAoKICAgICAgICBpZiAoIXN1bSAmJiAhbGVuZ3RoKSByZXR1cm4gMAoKICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHN1bSAvIGxlbmd0aCkKICAgICAgfSwKICAgIH0sCgogICAgY3JlYXRlZCAoKSB7CiAgICAgIHRoaXMudGFrZVB1bHNlKGZhbHNlKQogICAgfSwKCiAgICBtZXRob2RzOiB7CiAgICAgIGhlYXJ0YmVhdCAoKSB7CiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogKDEyMCAtIDgwKSArIDgwKQogICAgICB9LAogICAgICBhc3luYyB0YWtlUHVsc2UgKGluaGFsZSA9IHRydWUpIHsKICAgICAgICB0aGlzLmNoZWNraW5nID0gdHJ1ZQoKICAgICAgICBpbmhhbGUgJiYgYXdhaXQgZXhoYWxlKDEwMDApCgogICAgICAgIHRoaXMuaGVhcnRiZWF0cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDIwIH0sIHRoaXMuaGVhcnRiZWF0KQoKICAgICAgICB0aGlzLmNoZWNraW5nID0gZmFsc2UKICAgICAgfSwKICAgIH0sCn07Cg=="},{"version":3,"sources":["SparklineTakeBreak.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA","file":"SparklineTakeBreak.vue","sourceRoot":"src/components/vuetifyComponents/sparkline","sourcesContent":["<template>\n    <!-- ----------------------------------------------------------------------------- -->\n    <!-- SparklineTakeBreak -->\n    <!-- ----------------------------------------------------------------------------- -->\n    <div>\n        <v-list-item-subtitle class=\"text-wrap\">\n        For concise information, a complete chart might be overkill. Using a trend line with gradient provides enough detail for the user without showing too much information.\n        </v-list-item-subtitle>\n        <div class=\"mt-4\">\n            <v-card\n                class=\"mx-auto\"\n                color=\"grey lighten-4\"\n                max-width=\"600\"\n            >\n                <v-card-title>\n                <v-icon\n                    :color=\"checking ? 'red lighten-2' : 'info'\"\n                    class=\"mr-12\"\n                    size=\"64\"\n                    @click=\"takePulse\"\n                >\n                    mdi-heart-pulse\n                </v-icon>\n                <v-row align=\"start\">\n                    <div class=\"caption grey--text text-uppercase\">\n                    Heart rate\n                    </div>\n                    <div>\n                    <span\n                        class=\"display-2 font-weight-black\"\n                        v-text=\"avg || 'â€”'\"\n                    ></span>\n                    <strong v-if=\"avg\">BPM</strong>\n                    </div>\n                </v-row>\n\n                <v-spacer></v-spacer>\n\n                <v-btn icon class=\"align-self-start\" size=\"28\">\n                    <v-icon>mdi-arrow-right-thick</v-icon>\n                </v-btn>\n                </v-card-title>\n\n                <v-sheet color=\"transparent\">\n                <v-sparkline\n                    :key=\"String(avg)\"\n                    :smooth=\"16\"\n                    :gradient=\"['#1e88e5', '#00acc1']\"\n                    :line-width=\"3\"\n                    :value=\"heartbeats\"\n                    auto-draw\n                    stroke-linecap=\"round\"\n                ></v-sparkline>\n                </v-sheet>\n            </v-card>\n        </div>\n    </div>\n</template>\n\n<script>\n\nconst exhale = ms =>\n    new Promise(resolve => setTimeout(resolve, ms))\n\nexport default {\n  name: \"SparklineTakeBreak\",\n\n  data: () => ({\n      checking: false,\n      heartbeats: [],\n  }),\n  computed: {\n      avg () {\n        const sum = this.heartbeats.reduce((acc, cur) => acc + cur, 0)\n        const length = this.heartbeats.length\n\n        if (!sum && !length) return 0\n\n        return Math.ceil(sum / length)\n      },\n    },\n\n    created () {\n      this.takePulse(false)\n    },\n\n    methods: {\n      heartbeat () {\n        return Math.ceil(Math.random() * (120 - 80) + 80)\n      },\n      async takePulse (inhale = true) {\n        this.checking = true\n\n        inhale && await exhale(1000)\n\n        this.heartbeats = Array.from({ length: 20 }, this.heartbeat)\n\n        this.checking = false\n      },\n    },\n};\n</script>"]}]}