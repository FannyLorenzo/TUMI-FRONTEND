{"remainingRequest":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fanny/Documentos/CURSOS/GES/tumi_project/src/components/vuetifyComponents/toolbar/ToolbarContextualActionbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/src/components/vuetifyComponents/toolbar/ToolbarContextualActionbar.vue","mtime":1627753466731},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fanny/Documentos/CURSOS/GES/tumi_project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiVG9vbGJhckNvbnRleHR1YWxBY3Rpb25iYXIiLAoKICBkYXRhOiAoKSA9PiAoewogICAgc2VsZWN0aW9uOiBbXSwKICAgIGl0ZW1zOiBbIkZvbyIsICJCYXIiLCAiRml6eiIsICJCdXp6Il0sCiAgfSksCn07Cg=="},{"version":3,"sources":["ToolbarContextualActionbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ToolbarContextualActionbar.vue","sourceRoot":"src/components/vuetifyComponents/toolbar","sourcesContent":["<template>\n  <!-- ----------------------------------------------------------------------------- -->\n  <!-- Contextual action bars -->\n  <!-- ----------------------------------------------------------------------------- -->\n  <div>\n    <v-list-item-subtitle class=\"text-wrap\">\n      It is possible to update the appearance of a toolbar in response to\n      changes in app state. In this example, the color and content of the\n      toolbar changes in response to user selections in the\n      <code>v-select</code>.\n    </v-list-item-subtitle>\n    <div class=\"mt-4\">\n      <v-card max-width=\"500\" class=\"mx-auto\">\n        <v-toolbar :color=\"selection.length ? 'grey darken-4' : 'whihte'\" dark>\n          <v-app-bar-nav-icon v-if=\"!selection.length\"></v-app-bar-nav-icon>\n          <v-btn v-else icon @click=\"selection = []\">\n            <v-icon>mdi-close</v-icon>\n          </v-btn>\n\n          <v-toolbar-title>\n            {{ selection.length ? `${selection.length} selected` : \"Photos\" }}\n          </v-toolbar-title>\n\n          <v-spacer></v-spacer>\n\n          <v-scale-transition>\n            <v-btn v-if=\"selection.length\" key=\"export\" icon>\n              <v-icon>mdi-export-variant</v-icon>\n            </v-btn>\n          </v-scale-transition>\n          <v-scale-transition>\n            <v-btn v-if=\"selection.length\" key=\"delete\" icon>\n              <v-icon>mdi-delete</v-icon>\n            </v-btn>\n          </v-scale-transition>\n\n          <v-btn icon>\n            <v-icon>mdi-dots-vertical</v-icon>\n          </v-btn>\n        </v-toolbar>\n\n        <v-card-text>\n          <v-select\n            v-model=\"selection\"\n            :items=\"items\"\n            multiple\n            label=\"Select an option\"\n          ></v-select>\n        </v-card-text>\n      </v-card>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ToolbarContextualActionbar\",\n\n  data: () => ({\n    selection: [],\n    items: [\"Foo\", \"Bar\", \"Fizz\", \"Buzz\"],\n  }),\n};\n</script>"]}]}